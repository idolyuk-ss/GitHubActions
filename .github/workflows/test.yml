name: PullRequest Master

on:
  pull_request:
    branches: [ master ]

jobs:
  build_pr: 
    name: 'Build Pull Request'
    runs-on: ubuntu-latest
    env:
        TYPEORM_CONNECTION: "postgres"
        TYPEORM_HOST: "localhost"
        TYPEORM_USERNAME: "postgres"
        TYPEORM_PASSWORD: "postgres"
        TYPEORM_DATABASE: "telehealth_testing"
        TYPEORM_PORT: 5432
        TYPEORM_ENTITIES: "entities/*{.ts, .js}"
        TYPEORM_MIGRATIONS: "migrations/*.ts"
        TYPEORM_ENTITIES_DIR: "entities"
        TYPEORM_MIGRATIONS_DIR: "migrations"
        TYPEORM_SYNCHRONIZE: true
        PGHOST: "postgres"
        PGDATABASE: "telehealth_testing"
        PGUSER: "postgres"
        PGPASSWORD:  ${{ secrets.PGPASSWORD }}
        PGPORT: "5432"
    defaults:
      run:
        working-directory: ./website
    
    strategy:
      matrix:
        node-version: [12.15.0]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12.4
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres  
          POSTGRES_DB: telehealth_testing  
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5  
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432         

    steps:
    - name: Checkout and Setup node
      uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: yarn install dependencies
      run: npm install yarn -g
    - run: echo $TYPEORM_CONNECTION 
    - run: yarn --frozen-lockfile
    - run: yarn build
    - run: yarn db:migrate
    - run: echo "AWS Deployment"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - run: npm test   
